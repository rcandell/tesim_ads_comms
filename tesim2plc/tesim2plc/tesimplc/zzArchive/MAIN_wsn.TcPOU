<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.36">
  <POU Name="MAIN_wsn" Id="{a635b5c6-3da2-47b6-922c-5d54bc332cb7}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN_wsn
VAR

	fbReadMB : FB_ReadModbus;
	

	// THIS IS FOR THE WIHART GATEWAY
	//mbAddrs : ARRAY[0..1] OF MODBUS_DATA_MAP :=  [ (_ipAddress := '192.168.1.101', _startAddress:= 0), (_ipAddress := '192.168.1.101', _startAddress:= 12) ];
	
	// THIS IS FOR THE ISA100.11A GATEWAY
	mbAddrs : ARRAY[0..3] OF MODBUS_DATA_MAP :=  [ 
			(_ipAddress := '192.168.254.253', _startAddress:= 6), 
			(_ipAddress := '192.168.254.253', _startAddress:= 18),
			(_ipAddress := '192.168.254.253', _startAddress:= 30),
			(_ipAddress := '192.168.254.253', _startAddress:= 42)
		];
 
	test_input: BOOL := FALSE;
	
	//common calibration variables
	cal_tm 			:	TIME := T#20S;
	cal_tm_task 	:	TIME := T#100MS;
	cal_emode : E_CTRL_MODE := eCTRL_MODE_ACTIVE;
	cal_override	: BOOL	:= FALSE;
	cal_pv_mbs: ARRAY[1..4] OF LREAL := [0.0,0.0,0.0,0.0];
	cal_pv: ARRAY[1..4] OF LREAL := [0.0,0.0,0.0,0.0];
		
	// moving average
	cal_mva_work:	ARRAY[1..4] OF ARRAY[1..cal_mva_nWorkArray_SIZEOF] OF LREAL;
	cal_mva_st	:   ARRAY[1..4] OF ST_CTRL_MOVING_AVERAGE_PARAMS := [
		(	tTaskCycleTime:=cal_tm_task, 
			tCtrlCycleTime:=cal_tm,
			nSamplesToFilter:=cal_mva_nSamplesToFilter,
			nWorkArray_SIZEOF:=cal_mva_nWorkArray_SIZEOF),
		(	tTaskCycleTime:=cal_tm_task, 
			tCtrlCycleTime:=cal_tm,
			nSamplesToFilter:=cal_mva_nSamplesToFilter,
			nWorkArray_SIZEOF:=cal_mva_nWorkArray_SIZEOF),
		(	tTaskCycleTime:=cal_tm_task, 
			tCtrlCycleTime:=cal_tm,
			nSamplesToFilter:=cal_mva_nSamplesToFilter,
			nWorkArray_SIZEOF:=cal_mva_nWorkArray_SIZEOF),
		(	tTaskCycleTime:=cal_tm_task, 
			tCtrlCycleTime:=cal_tm,
			nSamplesToFilter:=cal_mva_nSamplesToFilter,
			nWorkArray_SIZEOF:=cal_mva_nWorkArray_SIZEOF)
	];
	fb_cal_mva	:	ARRAY[1..4] OF FB_CTRL_MOVING_AVERAGE := [ 
		(eMode:=cal_emode), 
		(eMode:=cal_emode), 
		(eMode:=cal_emode), 
		(eMode:=cal_emode)];
	cal_mva_mbs :	ARRAY[1..4] OF LREAL;

	// more common cal vars		
	cal_10v_dcoffset: ARRAY[1..4] OF LREAL;
	cal_ii: INT;
	cal_diff: ARRAY[1..4] OF LREAL;
	cal_frac: ARRAY[1..4] OF LREAL;
	
END_VAR

VAR CONSTANT
	cal_mva_nSamplesToFilter : UINT := 40;
	cal_mva_nWorkArray_SIZEOF: UINT := 400;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// adjust for test signals

IF test_input THEN
	G_PARAMS.A_FLOW_MAX 		:=10.0;
	G_PARAMS.D_FLOW_MAX			:=10.0;
	G_PARAMS.E_FLOW_MAX			:=10.0;
	G_PARAMS.AC_FLOW_MAX		:=10.0;
	
	G_PARAMS.A_FLOW_MIN 		:=0.0;
	G_PARAMS.D_FLOW_MIN			:=0.0;
	G_PARAMS.E_FLOW_MIN			:=0.0;
	G_PARAMS.AC_FLOW_MIN		:=0.0;
END_IF
//
// BEGIN PRODUCE THE DATA
//
// XMEAS values will come from the external TESIM program using ADS


//
// BEGIN WRITE SIGNALS to OUTPUTS
//
// VOLTAGES
XMEAS_IO_VOUT[XMEAS_IO_IDX.A_FLOW]		:= pv_float_to_dac(pv:=XMEAS[XMEAS_IDX.A_FLOW],		pv_max:=G_PARAMS.A_FLOW_MAX, pv_min:=G_PARAMS.A_FLOW_MIN, dac_max:=VOUT_WD_MAX, dac_min:=0);
XMEAS_IO_VOUT[XMEAS_IO_IDX.D_FLOW]		:= pv_float_to_dac(pv:=XMEAS[XMEAS_IDX.D_FLOW],		pv_max:=G_PARAMS.D_FLOW_MAX, pv_min:=G_PARAMS.D_FLOW_MIN, dac_max:=VOUT_WD_MAX, dac_min:=0);
XMEAS_IO_VOUT[XMEAS_IO_IDX.E_FLOW]		:= pv_float_to_dac(pv:=XMEAS[XMEAS_IDX.E_FLOW],		pv_max:=G_PARAMS.E_FLOW_MAX, pv_min:=G_PARAMS.E_FLOW_MIN, dac_max:=VOUT_WD_MAX, dac_min:=0);
XMEAS_IO_VOUT[XMEAS_IO_IDX.AC_FLOW]	:= pv_float_to_dac(pv:=XMEAS[XMEAS_IDX.AC_FLOW],	pv_max:=G_PARAMS.AC_FLOW_MAX, pv_min:=G_PARAMS.AC_FLOW_MIN, dac_max:=VOUT_WD_MAX, dac_min:=0);

//
// BEGIN MODBUS POLLING SEGMENT from the GATEWAY
//
fbReadMB(addrs := mbAddrs );

// poll modbus registers
G_IO.MBS_XMEAS_RAW[XMEAS_MBS_IDX.A_FLOW] := fbReadMB.registerValues[XMEAS_MBS_IDX.A_FLOW] + MBS_XMEAS_CAL_OFFSET[1];
G_IO.MBS_XMEAS_RAW[XMEAS_MBS_IDX.D_FLOW] := fbReadMB.registerValues[XMEAS_MBS_IDX.D_FLOW]+ MBS_XMEAS_CAL_OFFSET[2];
G_IO.MBS_XMEAS_RAW[XMEAS_MBS_IDX.E_FLOW] := fbReadMB.registerValues[XMEAS_MBS_IDX.E_FLOW] + MBS_XMEAS_CAL_OFFSET[3];
G_IO.MBS_XMEAS_RAW[XMEAS_MBS_IDX.AC_FLOW] := fbReadMB.registerValues[XMEAS_MBS_IDX.AC_FLOW] + MBS_XMEAS_CAL_OFFSET[4];

// convert raw modbus signals to process signals
G_IO.MBS_XMEAS[XMEAS_MBS_IDX.A_FLOW]	:=	LREAL_TO_REAL(adc_to_float_pv(G_IO.MBS_XMEAS_RAW[XMEAS_MBS_IDX.A_FLOW],		pv_max:=G_PARAMS.A_FLOW_MAX, 		pv_min:=G_PARAMS.A_FLOW_MIN, 	i_max:=G_PARAMS.VOUT_MAX, i_min:=G_PARAMS.VOUT_MIN));
G_IO.MBS_XMEAS[XMEAS_MBS_IDX.D_FLOW]	:=	LREAL_TO_REAL(adc_to_float_pv(G_IO.MBS_XMEAS_RAW[XMEAS_MBS_IDX.D_FLOW],		pv_max:=G_PARAMS.D_FLOW_MAX, 		pv_min:=G_PARAMS.D_FLOW_MIN, 	i_max:=G_PARAMS.VOUT_MAX, i_min:=G_PARAMS.VOUT_MIN));
G_IO.MBS_XMEAS[XMEAS_MBS_IDX.E_FLOW]	:=	LREAL_TO_REAL(adc_to_float_pv(G_IO.MBS_XMEAS_RAW[XMEAS_MBS_IDX.E_FLOW],		pv_max:=G_PARAMS.E_FLOW_MAX, 		pv_min:=G_PARAMS.E_FLOW_MIN, 	i_max:=G_PARAMS.VOUT_MAX, i_min:=G_PARAMS.VOUT_MIN));
G_IO.MBS_XMEAS[XMEAS_MBS_IDX.AC_FLOW]	:=	LREAL_TO_REAL(adc_to_float_pv(G_IO.MBS_XMEAS_RAW[XMEAS_MBS_IDX.AC_FLOW],	pv_max:=G_PARAMS.AC_FLOW_MAX, 	pv_min:=G_PARAMS.AC_FLOW_MIN, i_max:=G_PARAMS.VOUT_MAX, i_min:=G_PARAMS.VOUT_MIN));


//
// END MODBUS POLLING SEGMENT from the GATEWAY
//




		
// CALIBRATION SECTION
IF cal_override THEN
	FOR cal_ii := 1 TO 4 DO
		CASE cal_ii OF
			1:
			G_IO.XMEAS[XMEAS_IDX.A_FLOW]:=0.5;
			2:
			G_IO.XMEAS[XMEAS_IDX.D_FLOW] := 1500;
			3:
			G_IO.XMEAS[XMEAS_IDX.E_FLOW] := 1500;
			4:
			G_IO.XMEAS[XMEAS_IDX.AC_FLOW] := 2500;
		END_CASE
	END_FOR
END_IF
IF cal_emode=eCTRL_MODE_ACTIVE THEN
	FOR cal_ii := 1 TO 4 DO
		CASE cal_ii OF
			1:
			cal_pv_mbs[cal_ii] := G_IO.MBS_XMEAS[XMEAS_MBS_IDX.A_FLOW];
			cal_pv[cal_ii] := G_IO.XMEAS[XMEAS_IDX.A_FLOW];
			2:
			cal_pv_mbs[cal_ii] := G_IO.MBS_XMEAS[XMEAS_MBS_IDX.D_FLOW];
			cal_pv[cal_ii] := G_IO.XMEAS[XMEAS_IDX.D_FLOW];
			3:
			cal_pv_mbs[cal_ii] := G_IO.MBS_XMEAS[XMEAS_MBS_IDX.E_FLOW];
			cal_pv[cal_ii] := G_IO.XMEAS[XMEAS_IDX.E_FLOW];
			4:
			cal_pv_mbs[cal_ii] := G_IO.MBS_XMEAS[XMEAS_MBS_IDX.AC_FLOW];
			cal_pv[cal_ii] := G_IO.XMEAS[XMEAS_IDX.AC_FLOW];
		END_CASE
	
		// calculate moving average
		cal_mva_st[cal_ii].pWorkArray_ADR	:= ADR(cal_mva_work[cal_ii]);
		fb_cal_mva[cal_ii].fIn := cal_pv_mbs[cal_ii];
		fb_cal_mva[cal_ii](stParams:=cal_mva_st[cal_ii], eMode:=cal_emode);
		cal_mva_mbs[cal_ii] := fb_cal_mva[cal_ii].fOut;	
		
		// calculate dc offset
		IF ABS(cal_pv[cal_ii]) > 0.0 THEN
			cal_diff[cal_ii]:=cal_mva_mbs[cal_ii]-cal_pv[cal_ii];
			cal_frac[cal_ii]:=cal_diff[cal_ii]/cal_pv[cal_ii];
			cal_10v_dcoffset[cal_ii] := 10.0*cal_frac[cal_ii];
		END_IF
		
	END_FOR	
END_IF

]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>